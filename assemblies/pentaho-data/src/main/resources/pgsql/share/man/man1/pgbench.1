'\" t
.\"     Title: pgbench
.\"    Author: The PostgreSQL Global Development Group
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 2022
.\"    Manual: PostgreSQL 10.20 Documentation
.\"    Source: PostgreSQL 10.20
.\"  Language: English
.\"
.TH "PGBENCH" "1" "2022" "PostgreSQL 10.20" "PostgreSQL 10.20 Documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
pgbench \- run a benchmark test on PostgreSQL
.SH "SYNOPSIS"
.HP \w'\fBpgbench\fR\ 'u
\fBpgbench\fR \fB\-i\fR [\fIoption\fR...] [\fIdbname\fR]
.HP \w'\fBpgbench\fR\ 'u
\fBpgbench\fR [\fIoption\fR...] [\fIdbname\fR]
.SH "DESCRIPTION"
.PP
pgbench
is a simple program for running benchmark tests on
PostgreSQL\&. It runs the same sequence of SQL commands over and over, possibly in multiple concurrent database sessions, and then calculates the average transaction rate (transactions per second)\&. By default,
pgbench
tests a scenario that is loosely based on TPC\-B, involving five
\fBSELECT\fR,
\fBUPDATE\fR, and
\fBINSERT\fR
commands per transaction\&. However, it is easy to test other cases by writing your own transaction script files\&.
.PP
Typical output from
pgbench
looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
transaction type: <builtin: TPC\-B (sort of)>
scaling factor: 10
query mode: simple
number of clients: 10
number of threads: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
tps = 85\&.184871 (including connections establishing)
tps = 85\&.296346 (excluding connections establishing)
.fi
.if n \{\
.RE
.\}
.sp
The first six lines report some of the most important parameter settings\&. The next line reports the number of transactions completed and intended (the latter being just the product of number of clients and number of transactions per client); these will be equal unless the run failed before completion\&. (In
\fB\-T\fR
mode, only the actual number of transactions is printed\&.) The last two lines report the number of transactions per second, figured with and without counting the time to start database sessions\&.
.PP
The default TPC\-B\-like transaction test requires specific tables to be set up beforehand\&.
pgbench
should be invoked with the
\fB\-i\fR
(initialize) option to create and populate these tables\&. (When you are testing a custom script, you don\*(Aqt need this step, but will instead need to do whatever setup your test needs\&.) Initialization looks like:
.sp
.if n \{\
.RS 4
.\}
.nf
pgbench \-i [ \fIother\-options\fR ] \fIdbname\fR
.fi
.if n \{\
.RE
.\}
.sp
where
\fIdbname\fR
is the name of the already\-created database to test in\&. (You may also need
\fB\-h\fR,
\fB\-p\fR, and/or
\fB\-U\fR
options to specify how to connect to the database server\&.)
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBCaution\fR
.ps -1
.br
.PP
pgbench \-i
creates four tables
pgbench_accounts,
pgbench_branches,
pgbench_history, and
pgbench_tellers, destroying any existing tables of these names\&. Be very careful to use another database if you have tables having these names!
.sp .5v
.RE
.PP
At the default
\(lqscale factor\(rq
of 1, the tables initially contain this many rows:
.sp
.if n \{\
.RS 4
.\}
.nf
table                   # of rows
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
pgbench_branches        1
pgbench_tellers         10
pgbench_accounts        100000
pgbench_history         0
.fi
.if n \{\
.RE
.\}
.sp
You can (and, for most purposes, probably should) increase the number of rows by using the
\fB\-s\fR
(scale factor) option\&. The
\fB\-F\fR
(fillfactor) option might also be used at this point\&.
.PP
Once you have done the necessary setup, you can run your benchmark with a command that doesn\*(Aqt include
\fB\-i\fR, that is
.sp
.if n \{\
.RS 4
.\}
.nf
pgbench [ \fIoptions\fR ] \fIdbname\fR
.fi
.if n \{\
.RE
.\}
.sp
In nearly all cases, you\*(Aqll need some options to make a useful test\&. The most important options are
\fB\-c\fR
(number of clients),
\fB\-t\fR
(number of transactions),
\fB\-T\fR
(time limit), and
\fB\-f\fR
(specify a custom script file)\&. See below for a full list\&.
.SH "OPTIONS"
.PP
The following is divided into three subsections: Different options are used during database initialization and while running benchmarks, some options are useful in both cases\&.
.SS "Initialization Options"
.PP
pgbench
accepts the following command\-line initialization arguments:
.PP
\fB\-i\fR
.br
\fB\-\-initialize\fR
.RS 4
Required to invoke initialization mode\&.
.RE
.PP
\fB\-F\fR \fIfillfactor\fR
.br
\fB\-\-fillfactor=\fR\fIfillfactor\fR
.RS 4
Create the
pgbench_accounts,
pgbench_tellers
and
pgbench_branches
tables with the given fillfactor\&. Default is 100\&.
.RE
.PP
\fB\-n\fR
.br
\fB\-\-no\-vacuum\fR
.RS 4
Perform no vacuuming after initialization\&.
.RE
.PP
\fB\-q\fR
.br
\fB\-\-quiet\fR
.RS 4
Switch logging to quiet mode, producing only one progress message per 5 seconds\&. The default logging prints one message each 100000 rows, which often outputs many lines per second (especially on good hardware)\&.
.RE
.PP
\fB\-s\fR \fIscale_factor\fR
.br
\fB\-\-scale=\fR\fIscale_factor\fR
.RS 4
Multiply the number of rows generated by the scale factor\&. For example,
\-s 100
will create 10,000,000 rows in the
pgbench_accounts
table\&. Default is 1\&. When the scale is 20,000 or larger, the columns used to hold account identifiers (aid
columns) will switch to using larger integers (bigint), in order to be big enough to hold the range of account identifiers\&.
.RE
.PP
\fB\-\-foreign\-keys\fR
.RS 4
Create foreign key constraints between the standard tables\&.
.RE
.PP
\fB\-\-index\-tablespace=\fR\fB\fIindex_tablespace\fR\fR
.RS 4
Create indexes in the specified tablespace, rather than the default tablespace\&.
.RE
.PP
\fB\-\-tablespace=\fR\fB\fItablespace\fR\fR
.RS 4
Create tables in the specified tablespace, rather than the default tablespace\&.
.RE
.PP
\fB\-\-unlogged\-tables\fR
.RS 4
Create all tables as unlogged tables, rather than permanent tables\&.
.RE
.SS "Benchmarking Options"
.PP
pgbench
accepts the following command\-line benchmarking arguments:
.PP
\fB\-b\fR \fIscriptname[@weight]\fR
.br
\fB\-\-builtin\fR=\fIscriptname[@weight]\fR
.RS 4
Add the specified built\-in script to the list of scripts to be executed\&. Available built\-in scripts are:
tpcb\-like,
simple\-update
and
select\-only\&. Unambiguous prefixes of built\-in names are accepted\&. With the special name
list, show the list of built\-in scripts and exit immediately\&.
.sp
Optionally, write an integer weight after
@
to adjust the probability of selecting this script versus other ones\&. The default weight is 1\&. See below for details\&.
.RE
.PP
\fB\-c\fR \fIclients\fR
.br
\fB\-\-client=\fR\fIclients\fR
.RS 4
Number of clients simulated, that is, number of concurrent database sessions\&. Default is 1\&.
.RE
.PP
\fB\-C\fR
.br
\fB\-\-connect\fR
.RS 4
Establish a new connection for each transaction, rather than doing it just once per client session\&. This is useful to measure the connection overhead\&.
.RE
.PP
\fB\-d\fR
.br
\fB\-\-debug\fR
.RS 4
Print debugging output\&.
.RE
.PP
\fB\-D\fR \fIvarname\fR=\fIvalue\fR
.br
\fB\-\-define=\fR\fIvarname\fR=\fIvalue\fR
.RS 4
Define a variable for use by a custom script (see below)\&. Multiple
\fB\-D\fR
options are allowed\&.
.RE
.PP
\fB\-f\fR \fIfilename[@weight]\fR
.br
\fB\-\-file=\fR\fIfilename[@weight]\fR
.RS 4
Add a transaction script read from
\fIfilename\fR
to the list of scripts to be executed\&.
.sp
Optionally, write an integer weight after
@
to adjust the probability of selecting this script versus other ones\&. The default weight is 1\&. (To use a script file name that includes an
@
character, append a weight so that there is no ambiguity, for example
filen@me@1\&.) See below for details\&.
.RE
.PP
\fB\-j\fR \fIthreads\fR
.br
\fB\-\-jobs=\fR\fIthreads\fR
.RS 4
Number of worker threads within
pgbench\&. Using more than one thread can be helpful on multi\-CPU machines\&. Clients are distributed as evenly as possible among available threads\&. Default is 1\&.
.RE
.PP
\fB\-l\fR
.br
\fB\-\-log\fR
.RS 4
Write information about each transaction to a log file\&. See below for details\&.
.RE
.PP
\fB\-L\fR \fIlimit\fR
.br
\fB\-\-latency\-limit=\fR\fIlimit\fR
.RS 4
Transactions that last more than
\fIlimit\fR
milliseconds are counted and reported separately, as
late\&.
.sp
When throttling is used (\fB\-\-rate=\&.\&.\&.\fR), transactions that lag behind schedule by more than
\fIlimit\fR
ms, and thus have no hope of meeting the latency limit, are not sent to the server at all\&. They are counted and reported separately as
skipped\&.
.RE
.PP
\fB\-M\fR \fIquerymode\fR
.br
\fB\-\-protocol=\fR\fIquerymode\fR
.RS 4
Protocol to use for submitting queries to the server:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
simple: use simple query protocol\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
extended: use extended query protocol\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
prepared: use extended query protocol with prepared statements\&.
.RE
.sp
The default is simple query protocol\&. (See
Chapter\ \&52
for more information\&.)
.RE
.PP
\fB\-n\fR
.br
\fB\-\-no\-vacuum\fR
.RS 4
Perform no vacuuming before running the test\&. This option is
\fInecessary\fR
if you are running a custom test scenario that does not include the standard tables
pgbench_accounts,
pgbench_branches,
pgbench_history, and
pgbench_tellers\&.
.RE
.PP
\fB\-N\fR
.br
\fB\-\-skip\-some\-updates\fR
.RS 4
Run built\-in simple\-update script\&. Shorthand for
\fB\-b simple\-update\fR\&.
.RE
.PP
\fB\-P\fR \fIsec\fR
.br
\fB\-\-progress=\fR\fIsec\fR
.RS 4
Show progress report every
\fIsec\fR
seconds\&. The report includes the time since the beginning of the run, the tps since the last report, and the transaction latency average and standard deviation since the last report\&. Under throttling (\fB\-R\fR), the latency is computed with respect to the transaction scheduled start time, not the actual transaction beginning time, thus it also includes the average schedule lag time\&.
.RE
.PP
\fB\-r\fR
.br
\fB\-\-report\-latencies\fR
.RS 4
Report the average per\-statement latency (execution time from the perspective of the client) of each command after the benchmark finishes\&. See below for details\&.
.RE
.PP
\fB\-R\fR \fIrate\fR
.br
\fB\-\-rate=\fR\fIrate\fR
.RS 4
Execute transactions targeting the specified rate instead of running as fast as possible (the default)\&. The rate is given in transactions per second\&. If the targeted rate is above the maximum possible rate, the rate limit won\*(Aqt impact the results\&.
.sp
The rate is targeted by starting transactions along a Poisson\-distributed schedule time line\&. The expected start time schedule moves forward based on when the client first started, not when the previous transaction ended\&. That approach means that when transactions go past their original scheduled end time, it is possible for later ones to catch up again\&.
.sp
When throttling is active, the transaction latency reported at the end of the run is calculated from the scheduled start times, so it includes the time each transaction had to wait for the previous transaction to finish\&. The wait time is called the schedule lag time, and its average and maximum are also reported separately\&. The transaction latency with respect to the actual transaction start time, i\&.e\&., the time spent executing the transaction in the database, can be computed by subtracting the schedule lag time from the reported latency\&.
.sp
If
\fB\-\-latency\-limit\fR
is used together with
\fB\-\-rate\fR, a transaction can lag behind so much that it is already over the latency limit when the previous transaction ends, because the latency is calculated from the scheduled start time\&. Such transactions are not sent to the server, but are skipped altogether and counted separately\&.
.sp
A high schedule lag time is an indication that the system cannot process transactions at the specified rate, with the chosen number of clients and threads\&. When the average transaction execution time is longer than the scheduled interval between each transaction, each successive transaction will fall further behind, and the schedule lag time will keep increasing the longer the test run is\&. When that happens, you will have to reduce the specified transaction rate\&.
.RE
.PP
\fB\-s\fR \fIscale_factor\fR
.br
\fB\-\-scale=\fR\fIscale_factor\fR
.RS 4
Report the specified scale factor in
pgbench\*(Aqs output\&. With the built\-in tests, this is not necessary; the correct scale factor will be detected by counting the number of rows in the
pgbench_branches
table\&. However, when testing only custom benchmarks (\fB\-f\fR
option), the scale factor will be reported as 1 unless this option is used\&.
.RE
.PP
\fB\-S\fR
.br
\fB\-\-select\-only\fR
.RS 4
Run built\-in select\-only script\&. Shorthand for
\fB\-b select\-only\fR\&.
.RE
.PP
\fB\-t\fR \fItransactions\fR
.br
\fB\-\-transactions=\fR\fItransactions\fR
.RS 4
Number of transactions each client runs\&. Default is 10\&.
.RE
.PP
\fB\-T\fR \fIseconds\fR
.br
\fB\-\-time=\fR\fIseconds\fR
.RS 4
Run the test for this many seconds, rather than a fixed number of transactions per client\&.
\fB\-t\fR
and
\fB\-T\fR
are mutually exclusive\&.
.RE
.PP
\fB\-v\fR
.br
\fB\-\-vacuum\-all\fR
.RS 4
Vacuum all four standard tables before running the test\&. With neither
\fB\-n\fR
nor
\fB\-v\fR,
pgbench
will vacuum the
pgbench_tellers
and
pgbench_branches
tables, and will truncate
pgbench_history\&.
.RE
.PP
\fB\-\-aggregate\-interval=\fR\fB\fIseconds\fR\fR
.RS 4
Length of aggregation interval (in seconds)\&. May be used only with
\fB\-l\fR
option\&. With this option, the log contains per\-interval summary data, as described below\&.
.RE
.PP
\fB\-\-log\-prefix=\fR\fB\fIprefix\fR\fR
.RS 4
Set the filename prefix for the log files created by
\fB\-\-log\fR\&. The default is
pgbench_log\&.
.RE
.PP
\fB\-\-progress\-timestamp\fR
.RS 4
When showing progress (option
\fB\-P\fR), use a timestamp (Unix epoch) instead of the number of seconds since the beginning of the run\&. The unit is in seconds, with millisecond precision after the dot\&. This helps compare logs generated by various tools\&.
.RE
.PP
\fB\-\-sampling\-rate=\fR\fB\fIrate\fR\fR
.RS 4
Sampling rate, used when writing data into the log, to reduce the amount of log generated\&. If this option is given, only the specified fraction of transactions are logged\&. 1\&.0 means all transactions will be logged, 0\&.05 means only 5% of the transactions will be logged\&.
.sp
Remember to take the sampling rate into account when processing the log file\&. For example, when computing tps values, you need to multiply the numbers accordingly (e\&.g\&., with 0\&.01 sample rate, you\*(Aqll only get 1/100 of the actual tps)\&.
.RE
.SS "Common Options"
.PP
pgbench
accepts the following command\-line common arguments:
.PP
\fB\-h\fR \fIhostname\fR
.br
\fB\-\-host=\fR\fIhostname\fR
.RS 4
The database server\*(Aqs host name
.RE
.PP
\fB\-p\fR \fIport\fR
.br
\fB\-\-port=\fR\fIport\fR
.RS 4
The database server\*(Aqs port number
.RE
.PP
\fB\-U\fR \fIlogin\fR
.br
\fB\-\-username=\fR\fIlogin\fR
.RS 4
The user name to connect as
.RE
.PP
\fB\-V\fR
.br
\fB\-\-version\fR
.RS 4
Print the
pgbench
version and exit\&.
.RE
.PP
\fB\-?\fR
.br
\fB\-\-help\fR
.RS 4
Show help about
pgbench
command line arguments, and exit\&.
.RE
.SH "NOTES"
.SS "What is the \(lqTransaction\(rq Actually Performed in pgbench?"
.PP
pgbench
executes test scripts chosen randomly from a specified list\&. The scripts may include built\-in scripts specified with
\fB\-b\fR
and user\-provided scripts specified with
\fB\-f\fR\&. Each script may be given a relative weight specified after an
@
so as to change its selection probability\&. The default weight is
1\&. Scripts with a weight of
0
are ignored\&.
.PP
The default built\-in transaction script (also invoked with
\fB\-b tpcb\-like\fR) issues seven commands per transaction over randomly chosen
aid,
tid,
bid
and
delta\&. The scenario is inspired by the TPC\-B benchmark, but is not actually TPC\-B, hence the name\&.
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
BEGIN;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 7.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  7." 4.2
.\}
END;
.RE
.PP
If you select the
simple\-update
built\-in (also
\fB\-N\fR), steps 4 and 5 aren\*(Aqt included in the transaction\&. This will avoid update contention on these tables, but it makes the test case even less like TPC\-B\&.
.PP
If you select the
select\-only
built\-in (also
\fB\-S\fR), only the
\fBSELECT\fR
is issued\&.
.SS "Custom Scripts"
.PP
pgbench
has support for running custom benchmark scenarios by replacing the default transaction script (described above) with a transaction script read from a file (\fB\-f\fR
option)\&. In this case a
\(lqtransaction\(rq
counts as one execution of a script file\&.
.PP
A script file contains one or more SQL commands terminated by semicolons\&. Empty lines and lines beginning with
\-\-
are ignored\&. Script files can also contain
\(lqmeta commands\(rq, which are interpreted by
pgbench
itself, as described below\&.
.if n \{\
.sp
.\}
.RS 4
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBNote\fR
.ps -1
.br
.PP
Before
PostgreSQL
9\&.6, SQL commands in script files were terminated by newlines, and so they could not be continued across lines\&. Now a semicolon is
\fIrequired\fR
to separate consecutive SQL commands (though a SQL command does not need one if it is followed by a meta command)\&. If you need to create a script file that works with both old and new versions of
pgbench, be sure to write each SQL command on a single line ending with a semicolon\&.
.sp .5v
.RE
.PP
There is a simple variable\-substitution facility for script files\&. Variables can be set by the command\-line
\fB\-D\fR
option, explained above, or by the meta commands explained below\&. In addition to any variables preset by
\fB\-D\fR
command\-line options, there are a few variables that are preset automatically, listed in
Table\ \&242\&. A value specified for these variables using
\fB\-D\fR
takes precedence over the automatic presets\&. Once set, a variable\*(Aqs value can be inserted into a SQL command by writing
:\fIvariablename\fR\&. When running more than one client session, each session has its own set of variables\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&242.\ \&Automatic Variables
.TS
allbox tab(:);
lB lB.
T{
Variable
T}:T{
Description
T}
.T&
l l
l l.
T{
scale
T}:T{
current scale factor
T}
T{
client_id
T}:T{
unique number identifying the client session (starts from zero)
T}
.TE
.sp 1
.PP
Script file meta commands begin with a backslash (\e) and normally extend to the end of the line, although they can be continued to additional lines by writing backslash\-return\&. Arguments to a meta command are separated by white space\&. These meta commands are supported:
.PP
\eset \fIvarname\fR \fIexpression\fR
.RS 4
Sets variable
\fIvarname\fR
to a value calculated from
\fIexpression\fR\&. The expression may contain integer constants such as
5432, double constants such as
3\&.14159, references to variables
:\fIvariablename\fR, unary operators (+,
\-) and binary operators (+,
\-,
*,
/,
%) with their usual precedence and associativity,
function calls, and parentheses\&.
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
\eset ntellers 10 * :scale
\eset aid (1021 * random(1, 100000 * :scale)) % \e
           (100000 * :scale) + 1
.fi
.if n \{\
.RE
.\}
.RE
.PP
\esleep \fInumber\fR [ us | ms | s ]
.RS 4
Causes script execution to sleep for the specified duration in microseconds (us), milliseconds (ms) or seconds (s)\&. If the unit is omitted then seconds are the default\&.
\fInumber\fR
can be either an integer constant or a
:\fIvariablename\fR
reference to a variable having an integer value\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
\esleep 10 ms
.fi
.if n \{\
.RE
.\}
.RE
.PP
\esetshell \fIvarname\fR \fIcommand\fR [ \fIargument\fR \&.\&.\&. ]
.RS 4
Sets variable
\fIvarname\fR
to the result of the shell command
\fIcommand\fR
with the given
\fIargument\fR(s)\&. The command must return an integer value through its standard output\&.
.sp
\fIcommand\fR
and each
\fIargument\fR
can be either a text constant or a
:\fIvariablename\fR
reference to a variable\&. If you want to use an
\fIargument\fR
starting with a colon, write an additional colon at the beginning of
\fIargument\fR\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
\esetshell variable_to_be_assigned command literal_argument :variable ::literal_starting_with_colon
.fi
.if n \{\
.RE
.\}
.RE
.PP
\eshell \fIcommand\fR [ \fIargument\fR \&.\&.\&. ]
.RS 4
Same as
\esetshell, but the result of the command is discarded\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
\eshell command literal_argument :variable ::literal_starting_with_colon
.fi
.if n \{\
.RE
.\}
.RE
.SS "Built\-In Functions"
.PP
The functions listed in
Table\ \&243
are built into
pgbench
and may be used in expressions appearing in
\eset\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.B Table\ \&243.\ \&pgbench Functions
.TS
allbox tab(:);
lB lB lB lB lB.
T{
Function
T}:T{
Return Type
T}:T{
Description
T}:T{
Example
T}:T{
Result
T}
.T&
l l l l l
l l l l l
l l l l l
l l l l l
l l l l l
l l l l l
l l l l l
l l l l l
l l l l l
l l l l l
l l l l l.
T{
\fBabs(\fR\fB\fIa\fR\fR\fB)\fR
T}:T{
same as \fIa\fR
T}:T{
absolute value
T}:T{
abs(\-17)
T}:T{
17
T}
T{
\fBdebug(\fR\fB\fIa\fR\fR\fB)\fR
T}:T{
same as \fIa\fR
T}:T{
print \fIa\fR to stderr,
        and return \fIa\fR
T}:T{
debug(5432\&.1)
T}:T{
5432\&.1
T}
T{
\fBdouble(\fR\fB\fIi\fR\fR\fB)\fR
T}:T{
double
T}:T{
cast to double
T}:T{
double(5432)
T}:T{
5432\&.0
T}
T{
\fBgreatest(\fR\fB\fIa\fR\fR\fB [, \fR\fB\fI\&.\&.\&.\fR\fR\fB ] )\fR
T}:T{
double if any \fIa\fR is double, else integer
T}:T{
largest value among arguments
T}:T{
greatest(5, 4, 3, 2)
T}:T{
5
T}
T{
\fBint(\fR\fB\fIx\fR\fR\fB)\fR
T}:T{
integer
T}:T{
cast to int
T}:T{
int(5\&.4 + 3\&.8)
T}:T{
9
T}
T{
\fBleast(\fR\fB\fIa\fR\fR\fB [, \fR\fB\fI\&.\&.\&.\fR\fR\fB ] )\fR
T}:T{
double if any \fIa\fR is double, else integer
T}:T{
smallest value among arguments
T}:T{
least(5, 4, 3, 2\&.1)
T}:T{
2\&.1
T}
T{
\fBpi()\fR
T}:T{
double
T}:T{
value of the constant PI
T}:T{
pi()
T}:T{
3\&.14159265358979323846
T}
T{
\fBrandom(\fR\fB\fIlb\fR\fR\fB, \fR\fB\fIub\fR\fR\fB)\fR
T}:T{
integer
T}:T{
uniformly\-distributed random integer in [lb, ub]
T}:T{
random(1, 10)
T}:T{
an integer between 1 and 10
T}
T{
\fBrandom_exponential(\fR\fB\fIlb\fR\fR\fB, \fR\fB\fIub\fR\fR\fB, \fR\fB\fIparameter\fR\fR\fB)\fR
T}:T{
integer
T}:T{
exponentially\-distributed random integer in [lb, ub],
              see below
T}:T{
random_exponential(1, 10, 3\&.0)
T}:T{
an integer between 1 and 10
T}
T{
\fBrandom_gaussian(\fR\fB\fIlb\fR\fR\fB, \fR\fB\fIub\fR\fR\fB, \fR\fB\fIparameter\fR\fR\fB)\fR
T}:T{
integer
T}:T{
Gaussian\-distributed random integer in [lb, ub],
              see below
T}:T{
random_gaussian(1, 10, 2\&.5)
T}:T{
an integer between 1 and 10
T}
T{
\fBsqrt(\fR\fB\fIx\fR\fR\fB)\fR
T}:T{
double
T}:T{
square root
T}:T{
sqrt(2\&.0)
T}:T{
1\&.414213562
T}
.TE
.sp 1
.PP
The
random
function generates values using a uniform distribution, that is all the values are drawn within the specified range with equal probability\&. The
random_exponential
and
random_gaussian
functions require an additional double parameter which determines the precise shape of the distribution\&.
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For an exponential distribution,
\fIparameter\fR
controls the distribution by truncating a quickly\-decreasing exponential distribution at
\fIparameter\fR, and then projecting onto integers between the bounds\&. To be precise, with
.sp
.if n \{\
.RS 4
.\}
.nf
f(x) = exp(\-parameter * (x \- min) / (max \- min + 1)) / (1 \- exp(\-parameter))
.fi
.if n \{\
.RE
.\}
.sp
Then value
\fIi\fR
between
\fImin\fR
and
\fImax\fR
inclusive is drawn with probability:
f(i) \- f(i + 1)\&.
.sp
Intuitively, the larger the
\fIparameter\fR, the more frequently values close to
\fImin\fR
are accessed, and the less frequently values close to
\fImax\fR
are accessed\&. The closer to 0
\fIparameter\fR
is, the flatter (more uniform) the access distribution\&. A crude approximation of the distribution is that the most frequent 1% values in the range, close to
\fImin\fR, are drawn
\fIparameter\fR% of the time\&. The
\fIparameter\fR
value must be strictly positive\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
For a Gaussian distribution, the interval is mapped onto a standard normal distribution (the classical bell\-shaped Gaussian curve) truncated at
\-parameter
on the left and
+parameter
on the right\&. Values in the middle of the interval are more likely to be drawn\&. To be precise, if
PHI(x)
is the cumulative distribution function of the standard normal distribution, with mean
mu
defined as
(max + min) / 2\&.0, with
.sp
.if n \{\
.RS 4
.\}
.nf
f(x) = PHI(2\&.0 * parameter * (x \- mu) / (max \- min + 1)) /
       (2\&.0 * PHI(parameter) \- 1)
.fi
.if n \{\
.RE
.\}
.sp
then value
\fIi\fR
between
\fImin\fR
and
\fImax\fR
inclusive is drawn with probability:
f(i + 0\&.5) \- f(i \- 0\&.5)\&. Intuitively, the larger the
\fIparameter\fR, the more frequently values close to the middle of the interval are drawn, and the less frequently values close to the
\fImin\fR
and
\fImax\fR
bounds\&. About 67% of values are drawn from the middle
1\&.0 / parameter, that is a relative
0\&.5 / parameter
around the mean, and 95% in the middle
2\&.0 / parameter, that is a relative
1\&.0 / parameter
around the mean; for instance, if
\fIparameter\fR
is 4\&.0, 67% of values are drawn from the middle quarter (1\&.0 / 4\&.0) of the interval (i\&.e\&., from
3\&.0 / 8\&.0
to
5\&.0 / 8\&.0) and 95% from the middle half (2\&.0 / 4\&.0) of the interval (second and third quartiles)\&. The minimum
\fIparameter\fR
is 2\&.0 for performance of the Box\-Muller transform\&.
.RE
.PP
As an example, the full definition of the built\-in TPC\-B\-like transaction is:
.sp
.if n \{\
.RS 4
.\}
.nf
\eset aid random(1, 100000 * :scale)
\eset bid random(1, 1 * :scale)
\eset tid random(1, 10 * :scale)
\eset delta random(\-5000, 5000)
BEGIN;
UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
END;
.fi
.if n \{\
.RE
.\}
.sp
This script allows each iteration of the transaction to reference different, randomly\-chosen rows\&. (This example also shows why it\*(Aqs important for each client session to have its own variables \(em otherwise they\*(Aqd not be independently touching different rows\&.)
.SS "Per\-Transaction Logging"
.PP
With the
\fB\-l\fR
option (but without the
\fB\-\-aggregate\-interval\fR
option),
pgbench
writes information about each transaction to a log file\&. The log file will be named
\fIprefix\fR\&.\fInnn\fR, where
\fIprefix\fR
defaults to
pgbench_log, and
\fInnn\fR
is the PID of the
pgbench
process\&. The prefix can be changed by using the
\fB\-\-log\-prefix\fR
option\&. If the
\fB\-j\fR
option is 2 or higher, so that there are multiple worker threads, each will have its own log file\&. The first worker will use the same name for its log file as in the standard single worker case\&. The additional log files for the other workers will be named
\fIprefix\fR\&.\fInnn\fR\&.\fImmm\fR, where
\fImmm\fR
is a sequential number for each worker starting with 1\&.
.PP
The format of the log is:
.sp
.if n \{\
.RS 4
.\}
.nf
\fIclient_id\fR \fItransaction_no\fR \fItime\fR \fIscript_no\fR \fItime_epoch\fR \fItime_us\fR [ \fIschedule_lag\fR ]
.fi
.if n \{\
.RE
.\}
.sp
where
\fIclient_id\fR
indicates which client session ran the transaction,
\fItransaction_no\fR
counts how many transactions have been run by that session,
\fItime\fR
is the total elapsed transaction time in microseconds,
\fIscript_no\fR
identifies which script file was used (useful when multiple scripts were specified with
\fB\-f\fR
or
\fB\-b\fR), and
\fItime_epoch\fR/\fItime_us\fR
are a Unix\-epoch time stamp and an offset in microseconds (suitable for creating an ISO 8601 time stamp with fractional seconds) showing when the transaction completed\&. The
\fIschedule_lag\fR
field is the difference between the transaction\*(Aqs scheduled start time, and the time it actually started, in microseconds\&. It is only present when the
\fB\-\-rate\fR
option is used\&. When both
\fB\-\-rate\fR
and
\fB\-\-latency\-limit\fR
are used, the
\fItime\fR
for a skipped transaction will be reported as
skipped\&.
.PP
Here is a snippet of a log file generated in a single\-client run:
.sp
.if n \{\
.RS 4
.\}
.nf
0 199 2241 0 1175850568 995598
0 200 2465 0 1175850568 998079
0 201 2513 0 1175850569 608
0 202 2038 0 1175850569 2663
.fi
.if n \{\
.RE
.\}
.sp
Another example with
\-\-rate=100
and
\-\-latency\-limit=5
(note the additional
\fIschedule_lag\fR
column):
.sp
.if n \{\
.RS 4
.\}
.nf
0 81 4621 0 1412881037 912698 3005
0 82 6173 0 1412881037 914578 4304
0 83 skipped 0 1412881037 914578 5217
0 83 skipped 0 1412881037 914578 5099
0 83 4722 0 1412881037 916203 3108
0 84 4142 0 1412881037 918023 2333
0 85 2465 0 1412881037 919759 740
.fi
.if n \{\
.RE
.\}
.sp
In this example, transaction 82 was late, because its latency (6\&.173 ms) was over the 5 ms limit\&. The next two transactions were skipped, because they were already late before they were even started\&.
.PP
When running a long test on hardware that can handle a lot of transactions, the log files can become very large\&. The
\fB\-\-sampling\-rate\fR
option can be used to log only a random sample of transactions\&.
.SS "Aggregated Logging"
.PP
With the
\fB\-\-aggregate\-interval\fR
option, a different format is used for the log files:
.sp
.if n \{\
.RS 4
.\}
.nf
\fIinterval_start\fR \fInum_transactions\fR \fIsum_latency\fR \fIsum_latency_2\fR \fImin_latency\fR \fImax_latency\fR [ \fIsum_lag\fR \fIsum_lag_2\fR \fImin_lag\fR \fImax_lag\fR [ \fIskipped\fR ] ]
.fi
.if n \{\
.RE
.\}
.sp
where
\fIinterval_start\fR
is the start of the interval (as a Unix epoch time stamp),
\fInum_transactions\fR
is the number of transactions within the interval,
\fIsum_latency\fR
is the sum of the transaction latencies within the interval,
\fIsum_latency_2\fR
is the sum of squares of the transaction latencies within the interval,
\fImin_latency\fR
is the minimum latency within the interval, and
\fImax_latency\fR
is the maximum latency within the interval\&. The next fields,
\fIsum_lag\fR,
\fIsum_lag_2\fR,
\fImin_lag\fR, and
\fImax_lag\fR, are only present if the
\fB\-\-rate\fR
option is used\&. They provide statistics about the time each transaction had to wait for the previous one to finish, i\&.e\&., the difference between each transaction\*(Aqs scheduled start time and the time it actually started\&. The very last field,
\fIskipped\fR, is only present if the
\fB\-\-latency\-limit\fR
option is used, too\&. It counts the number of transactions skipped because they would have started too late\&. Each transaction is counted in the interval when it was committed\&.
.PP
Here is some example output:
.sp
.if n \{\
.RS 4
.\}
.nf
1345828501 5601 1542744 483552416 61 2573
1345828503 7884 1979812 565806736 60 1479
1345828505 7208 1979422 567277552 59 1391
1345828507 7685 1980268 569784714 60 1398
1345828509 7073 1979779 573489941 236 1411
.fi
.if n \{\
.RE
.\}
.PP
Notice that while the plain (unaggregated) log file shows which script was used for each transaction, the aggregated log does not\&. Therefore if you need per\-script data, you need to aggregate the data on your own\&.
.SS "Per\-Statement Latencies"
.PP
With the
\fB\-r\fR
option,
pgbench
collects the elapsed transaction time of each statement executed by every client\&. It then reports an average of those values, referred to as the latency for each statement, after the benchmark has finished\&.
.PP
For the default script, the output will look similar to this:
.sp
.if n \{\
.RS 4
.\}
.nf
starting vacuum\&.\&.\&.end\&.
transaction type: <builtin: TPC\-B (sort of)>
scaling factor: 1
query mode: simple
number of clients: 10
number of threads: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
latency average = 15\&.844 ms
latency stddev = 2\&.715 ms
tps = 618\&.764555 (including connections establishing)
tps = 622\&.977698 (excluding connections establishing)
script statistics:
 \- statement latencies in milliseconds:
        0\&.002  \eset aid random(1, 100000 * :scale)
        0\&.005  \eset bid random(1, 1 * :scale)
        0\&.002  \eset tid random(1, 10 * :scale)
        0\&.001  \eset delta random(\-5000, 5000)
        0\&.326  BEGIN;
        0\&.603  UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
        0\&.454  SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
        5\&.528  UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
        7\&.335  UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
        0\&.371  INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
        1\&.212  END;
.fi
.if n \{\
.RE
.\}
.PP
If multiple script files are specified, the averages are reported separately for each script file\&.
.PP
Note that collecting the additional timing information needed for per\-statement latency computation adds some overhead\&. This will slow average execution speed and lower the computed TPS\&. The amount of slowdown varies significantly depending on platform and hardware\&. Comparing average TPS values with and without latency reporting enabled is a good way to measure if the timing overhead is significant\&.
.SS "Good Practices"
.PP
It is very easy to use
pgbench
to produce completely meaningless numbers\&. Here are some guidelines to help you get useful results\&.
.PP
In the first place,
\fInever\fR
believe any test that runs for only a few seconds\&. Use the
\fB\-t\fR
or
\fB\-T\fR
option to make the run last at least a few minutes, so as to average out noise\&. In some cases you could need hours to get numbers that are reproducible\&. It\*(Aqs a good idea to try the test run a few times, to find out if your numbers are reproducible or not\&.
.PP
For the default TPC\-B\-like test scenario, the initialization scale factor (\fB\-s\fR) should be at least as large as the largest number of clients you intend to test (\fB\-c\fR); else you\*(Aqll mostly be measuring update contention\&. There are only
\fB\-s\fR
rows in the
pgbench_branches
table, and every transaction wants to update one of them, so
\fB\-c\fR
values in excess of
\fB\-s\fR
will undoubtedly result in lots of transactions blocked waiting for other transactions\&.
.PP
The default test scenario is also quite sensitive to how long it\*(Aqs been since the tables were initialized: accumulation of dead rows and dead space in the tables changes the results\&. To understand the results you must keep track of the total number of updates and when vacuuming happens\&. If autovacuum is enabled it can result in unpredictable changes in measured performance\&.
.PP
A limitation of
pgbench
is that it can itself become the bottleneck when trying to test a large number of client sessions\&. This can be alleviated by running
pgbench
on a different machine from the database server, although low network latency will be essential\&. It might even be useful to run several
pgbench
instances concurrently, on several client machines, against the same database server\&.
.SS "Security"
.PP
If untrusted users have access to a database that has not adopted a
secure schema usage pattern, do not run
pgbench
in that database\&.
pgbench
uses unqualified names and does not manipulate the search path\&.
